spells = {
    list : ARRAY OF SPELL OBJECTS
    get : {
        checkList : UTILITY, RETURNS MAIN LIST IF NO LIST IS GIVEN
        byName : GET LIST OF SPELLS BASED ON NAME / SEARCH INPUT
        byTag : GET LIST OF SPELLS BY METADATA OR CLASS
        byLevel : GET LIST OF SPELLS BY LEVEL
    }
    render : {
        spellDescr : RETURNS STRING DESCRIPTION OF SPELL
        descrLink : RETURNS A LINK THAT OPENS THE DESCRIPTION MODAL
        addLink : RETURNS A LINK THAT ADDS THE SPELL TO A GIVEN LIST
        listing : RETURNS A WRAPPED LISTING FOR A SPELL
        listAll : RETURNS A WRAPPED LIST OF LISTINGS FOR ALL SPELLS
    }
}

SpellList (class) = {
    class : {
        constructor : CREATES A NEW SPELL LIST INSTANCE
        this : {
            name : THE NAME OF THE LIST
            spells : THE SPELLS IN THE LIST    
        }
    }
    static : {
        is : RETURNS WHETHER ARGUMENT IS A SPELL LIST INSTANCE
        add : ADD A NEW SPELL LIST WITH ALL APPROPRIATE PLUMBING
        getByName : GET A SPELL LIST BY ITS NAME PROPERTY
        del : DELETE A SPELL LIST
        render : RENDER A GIVEN LIST INSTANCE
    }
    instance : {
        hasSpell : RETURNS WHETHER SPELL IS ON LIST
        addSpell : ADDS NEW SPELL TO THE LIST BY SPELL'S OBJECT
        deleteSpell : DELETES A SPELL FROM THE LIST
        spellDescriptionLink : CREATES DESCRIPTION LINK FOR A SPELL IN THE LIST
        spellDeleteLink : CREATES DELETE LINK TO REMOVE A SPELL FROM THE LIST
        spellListing : CREATES A LISTING FOR ONE SPELL IN THE LIST
        renderList : RETURNS A WRAPPED LIST OF LISTINGS FOR ALL SPELLS IN THE LIST
        exportList : EXPORTS THE LIST AS JSON FOR SHARING AND BACK-UP
        importList : IMPORTS AN EXTERNAL LIST FROM JSON
    }
    prototype (other) : {
        toJSON : PIPING FOR SUGARCUBE
        clone : PIPING FOR SUGARCUBE
    }
}